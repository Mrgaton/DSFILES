using DSFiles_Client.CGuis;
using DSFiles_Client.Helpers;
using DSFiles_Shared;
using JSPasteNet;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Security;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Threading;
using System.Windows.Forms;
using static AnsiHelper;
using Application = Terminal.Gui.App.Application;
using Clipboard = System.Windows.Forms.Clipboard;
using CompressionLevel = System.IO.Compression.CompressionLevel;
using File = System.IO.File;

namespace DSFiles_Client
{
    internal static class Program
    {
        private static bool DirSetted = SetCurrentDir();

        private static bool SetCurrentDir()
        {
            try
            {
                string currentDir = AppContext.BaseDirectory;

                Directory.SetCurrentDirectory(currentDir);

                string[] paths = [Path.Combine(currentDir, LogsFolder)];

                foreach (var path in paths)
                {
                    if (!Directory.Exists(path))
                        Directory.CreateDirectory(path);
                }

                string[] files = [UploadedFiles];

                foreach (var file in files)
                {
                    if (!File.Exists(file))
                        File.WriteAllText(file, "");
                }

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }

            return false;
        }

        private const string URLProtocol = "DSFILES";

        private const string LogsFolder = "logs";

        public const string WebHookFileName = LogsFolder + "\\webHook.dat";

        public const string UploadedFiles = LogsFolder + "\\uploaded.log";

        private const string Debug = LogsFolder + "\\debug.log";

        public static string? API_TOKEN { get; set; }

        public static readonly StreamWriter UploadedFilesWriter = new StreamWriter(File.Open(UploadedFiles, FileMode.Append, FileAccess.Write, FileShare.ReadWrite)) { AutoFlush = true };
        public static readonly StreamWriter DebugWriter = new StreamWriter(File.Open(Debug, FileMode.Append, FileAccess.Write, FileShare.ReadWrite)) { AutoFlush = true };

        public static readonly HttpClient client = new HttpClient(new HttpClientHandler()
        {
            AutomaticDecompression = DecompressionMethods.All,
            AllowAutoRedirect = true,
            SslProtocols = System.Security.Authentication.SslProtocols.Tls13 | System.Security.Authentication.SslProtocols.Tls12,
            CookieContainer = new CookieContainer(),
        })
        {
            Timeout = TimeSpan.FromSeconds(599),
            DefaultRequestVersion = HttpVersion.Version30,
            DefaultVersionPolicy = HttpVersionPolicy.RequestVersionOrLower
        };

        public static string GetFromJspaste(string data)
        {
            return JSPasteClient.Get(data.Split('/').Last(), "hola").Result
               .Split('\n')
               .First(l => !string.IsNullOrEmpty(l) && l[0] != '#')
               .Split('/')[0];
        }

        private static string sevenZipPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), @"7-Zip\");

        public static void SevenZipPaths(string outputFile, CompressionLevel compressionLevel, params string[] paths)
        {
            if (!File.Exists(Path.Combine(sevenZipPath, "7z.dll")))
            {
                Console.WriteLine(AnsiColors.Yellow + "Installing " + AnsiColors.BrightYellow + "7zip " + AnsiColors.Yellow +"please wait");

                Process.Start(new ProcessStartInfo()
                {
                    FileName = "winget",
                    Arguments = "install --accept-source-agreements --accept-package-agreements 7zip.7zip",
                    CreateNoWindow = false,
                    RedirectStandardError = false,
                    RedirectStandardInput = false,
                    RedirectStandardOutput = false,
                    UseShellExecute = true,
                }).WaitForExit();
            }

            int processors = Math.Min(Environment.ProcessorCount, 4);

            int level = 9;
            int wordSize = 192;

            var freeMb = (ClientHelper.GetAvilableMemory() / 1000 / 1000) - 512 - (ulong)wordSize;
            int dictSize = Math.Max(64, (int)freeMb / processors / 5);

            switch (compressionLevel)
            {
                case CompressionLevel.Fastest:
                    level = 2;
                    dictSize = 4;
                    wordSize = 32;
                    break;

                case CompressionLevel.Optimal:
                    level = 6;
                    dictSize = 32;
                    wordSize = 64;
                    break;
            }

            Console.WriteLine(AnsiColors.Orange + "Compressing with dictSize" + AnsiColors.DarkGray+ ":" +AnsiColors.Yellow + dictSize+ AnsiColors.LightGray);

            Process.Start(new ProcessStartInfo()
            {
                FileName = Path.Combine(sevenZipPath, "7z.exe"),
                Arguments = $"a -t7z -m0=lzma2 -mx={level} -mmt={processors} -aoa -mfb={wordSize} -md={dictSize}m -ms=on -bsp1 -bse1 -bt \"{outputFile}\" " + string.Join(' ', paths.Where(p => !string.IsNullOrWhiteSpace(p)).Select(p => '\"' + p.Trim('\"') + '\"')),
            }).WaitForExit();

            Console.Write(AnsiColors.White);
        }

        [STAThread]
        private static void Main(string[] args)
        {
            Console.Title = "Dsfiles Manager";

            if (args.Length > 0 && args[0].StartsWith($"{URLProtocol}://", StringComparison.InvariantCultureIgnoreCase))
            {
                args = args[0].Split('/').Skip(2).Select(Uri.UnescapeDataString).Select(Environment.ExpandEnvironmentVariables).ToArray();

                foreach (var arg in args)
                {
                    var splited = arg.Split('=');

                    if (splited.Length == 2 && splited[0].ToLower() == "token")
                    {
                        API_TOKEN = splited[1];
                    }
                }
            }

/*
            string ardata = @"1395548115121209384
1395548126856613919
1395548137862463488
1395548148025262321
1395548158666215558
1395548168233680956
1395548177813340373
1395548191457546422
1395548201242726400
1395548210893815941
1395548225674543144
1395548236487463063
1395548248487231498
1395548258549629009
1395548268842455113
1395548278325645333
1395548286433362055
1395548295715360798
1395548306243059794
1395548316435218613
1395548327445270679
1395548338547458139
1395548347955282085
1395548357576884255
1395548368347860992
1395548378087292928
1395548387209773098
1395548398207107132
1395548409376542801
1395548421057810482
1395548432013328546
1395548444264763596
1395548454570430604
1395548462719963217
1395548472702271638
1395548482168684564
1395548490779721809
1395548501567602849
1395548512950947951
1395548524204261547
1395548537642553414
1395548547646099558
1395548558345633954
1395548568567418900
1395548577299824841
1395548587793842188
1395548597520437409
1395548609449037925
1395548618618044486
1395548627182817310
1395548636435185859
1395548649013907638
1395548660124880966
1395548673626210304
1395548686104133783
1395548703351246848
1395548717431656449
1395548738184937693
1395548752088924300
1395548765150249032
1395548780920836226
1395548789657309244
1395548798897356911
1395548807504334969
1395548817255960607
1395548827489931364
1395548839775174758
1395548851695255572
1395548862432809010
1395548872696135690
1395548882695491665
1395548893051093103
1395548901821386752
1395548910923157554
1395548922902089728
1395548932314239027
1395548944209281074
1395548955034783764
1395548965713481779
1395548975804842076
1395548984856023151
1395548994716827699
1395549005173358704
1395549015294214234
1395549024316031077
1395549033388572733
1395549043110838422
1395549054230069368
1395549064237420624
1395549074710728814
1395549085884223588
1395549096067989514
1395549106230792232
1395549115731148831
1395549125113679952
1395549135330869340
1395549144810000524
1395549154994028605
1395549164808441887
1395549173792641149
1395549183574020288
1395549193061535765
1395549208743776327
1395549219217084547
1395549229719748788
1395549243493580952
1395549252641493023
1395549261671698504
1395549271213998282
1395549281485852693
1395549291904241695
1395549301223981197
1395549310241869864
1395549320094158899
1395549330055630899
1395549343682924544
1395549353447395429
1395549363157078046
1395549372632272967
1395549380832137336
1395549391271755878
1395549401723965491
1395549412356259921
1395549423479820429
1395549434846384208
1395549445386404045
1395549457692622972
1395549467347910736
1395549476696887427
1395549485240942693
1395549495378448384
1395549503804936252
1395549513481195710
1395549522314133595
1395549531579482122
1395549540991504556
1395549551196115035
1395549559664414882
1395549568598413423
1395549578853486612
1395549590010204191
1395549600538169415
1395549610793107546
1395549620288880792
1395549631395532883
1395549646780104735
1395549655714103447
1395549666002735245
1395549675981111476
1395549685581877381
1395549696977535016
1395549705966194849
1395549714564514003
1395549724198703144
1395549734516555897
1395549744662839378
1395549753676267580
1395549763851784232
1395549773150552210
1395549782071574640
1395549790917628114
1395549801957036042
1395549814480965732
1395549824396300399
1395549833938337852
1395549843983695913
1395549854335369236
1395549864301035540
1395549878352085043
1395549887374032987
1395549898887401532
1395549910795026482
1395549923096662077
1395549935369326722
1395549949353136249
1395549962389033082
1395549973138903070
1395549986304954491
1395549997134778541
1395550015702700152
1395550026389782578
1395550034841571328
1395550044412973260
1395550054097490021
1395550063761031219
1395550074045730846
1395550082572488724
1395550094899810314
1395550105226186752
1395550113568391238
1395550123102310440
1395550130953912433
1395550139929591888
1395550150147182612
1395550159571779584
1395550168215978186
1395550178374582483
1395550188717871245
1395550198071033956
1395550209169297481
1395550218753146972
1395550227481497750
1395550237325525043
1395550247312167032
1395550255684255814
1395550266316689408
1395550275221192704
1395550285207965807
1395550294837952522
1395550305583894579
1395550315712872539
1395550329952796734
1395550345912127558
1395550359690416239
1395550371858092143
1395550385418272920
1395550395933397123
1395550405743870002
1395550415382249533
1395550423254958161
1395550433962889236
1395550444129882264
1395550452837519492
1395550462283092068
1395550477336449135
1395550488065347594
1395550499897610270
1395550512576856095
1395550523976974446
1395550532072112159
1395550542448558162
1395550550640033883
1395550560383402074
1395550570017853632
1395550579052384367
1395550587625541652
1395550603907698798
1395550615123263629
1395550626645016647
1395550635713106101
1395550645360263178
1395550653027188807
1395550663634583552
1395550671985704960
1395550681863163975
1395550692047065260
1395550703698575380
1395550713228034179
1395550722388398110
1395550731729240094
1395550742244364358
1395550754768425102
1395550767317913731
1395550780429176912
1395550791737151568
1395550802843668590
1395550813878882324
1395550827749572689
1395550838205976646
1395550846984392815
1395550858875240550
1395550869499412511
1395550878823350312
1395550887816069139
1395550898293444648
1395550908305113188
1395550917583179808
1395550927632466063
1395550937350668463
1395550946658091100
1395550956133027960
1395550966874509342
1395550977012138024
1395550985451081788
1395550996389957755
1395551005806035147
1395551015583088762
1395551025313878076
1395551034448805961
1395551044238442496
1395551053306527834
1395551063834230945
1395551072616976494
1395551082855272619
1395551091151732827
1395551100597309491
1395551109497491607
1395551118817497120
1395551129701584977
1395551138761277490
1395551148236345465
1395551158004748359
1395551169262129152
1395551179928502423
1395551190795812894
1395551200954552410
1395551209863250103
1395551222139977829
1395551231459459175
1395551240951169054
1395551249868525588
1395551265102106665
1395551275302780998
1395551284685438976
1395551293594009601
1395551303589171210
1395551313114435634
1395551321570148443
1395551330424062072
1395551338435313674
1395551348543717529
1395551356634267738
1395551370169417860
1395551382928494783
1395551395700150383
1395551407599386775
1395551418294866081
1395551427346173982
1395551436045025300
1395551445473824858
1395551454432989386
1395551464218165268
1395551474905252011
1395551484048969768
1395551493846994974
1395551503288242281
1395551512918233188
1395551523987263618
1395551533701009479
1395551543780184064
1395551553364033577
1395551561542795347
1395551573186445364
1395551582556262522
1395551590965837925
1395551599266496703
1395551609055871089
1395551619961196634
1395551633416392704
1395551646351888435
1395551659899355317
1395551669177155758
1395551678375399536
1395551687707459704
1395551697429860495
1395551707475480596
1395551717549932736
1395551725925957714
1395551736176971928
1395551745987317932
1395551754099101817
1395551763184226385
1395551771845197945
1395551780636459080
1395551790073909308
1395551799884120104
1395551811364196502
1395551825192681634
1395551837943238837
1395551849427505354
1395551859850084524
1395551869673279550
1395551878086918195
1395551891680661595
1395551902350966854
1395551911767445505
1395551922999791878
1395551934735188068
1395551953034936390
1395551964435059019
1395551974832734208
1395551991417016391
1395552001164574852
1395552010186526904
1395552020739526768
1395552031866884157
1395552041996255243
1395552051546554459
1395552061017424068
1395552073071722577
1395552083138187364
1395552092449542296
1395552101752373379
1395552110313078845
1395552119884480624
1395552129925644449
1395552140046630963
1395552150821540011
1395552161471139861
1395552173722439761
1395552185797967993
1395552197546348564
1395552210951344251
1395552224582570046
1395552235437424682
1395552246913171516
1395552259424784414
1395552272217538720
1395552284204863679
1395552293629329549
1395552304027144262
1395552314680410142
1395552324625371329
1395552334263750766
1395552344787124294
1395552354136359033
1395552364039245897
1395552374000586874
1395552385014698034
1395552404925190164
1395552417277546506
1395552426765062257
1395552439054372974
1395552448784891975
1395552458448568422
1395552468544520202
1395552477843034143
1395552490128146443
1395552500530155601
1395552512303435949
1395552521744814121
1395552531622662265
1395552541109915808
1395552550433984613
1395552560236073000
1395552569711132672
1395552581090152518
1395552591730970784
1395552604527919225
1395552614908825750
1395552624694136913
1395552633376210944
1395552643321036934
1395552652066164757
1395552661566263326
1395552672299483226
1395552684383272991
1395552695447982190
1395552706344521851
1395552717048647760
1395552725101576403
1395552735792730152
1395552746882727948
1395552763261222962
1395552775693144155
1395552786866765966
1395552795649769572
1395552806185992203
1395552815144767668
1395552824435151019
1395552834837282836
1395552843532079214
1395552853807988769
1395552868496445521
1395552880622305310
1395552896367591545
1395552905435807884
1395552916085149881
1395552926432235550
1395552936163020882
1395552946112041052
1395552956337623101
1395552966395691169
1395552976868999209
1395552986775945338
1395552996359934013
1395553005633278085
1395553014873456781
1395553025526993026
1395553036138577950
1395553045986676876
1395553055604473917
1395553064672296990
1395553073744580698
1395553084184465508
1395553096922300427
1395553105692852274
1395553116237336597
1395553126060261488
1395553135828926514
1395553145362583633
1395553155491565752
1395553164735938741
1395553175867625492
1395553186152185969
1395553195551625340
1395553205437599845
1395553217324126329
1395553227889704960
1395553236756201514
1395553245778153472
1395553256272298075
1395553266326179990
1395553278191861952
1395553289000452259
1395553302493659287
1395553314825048174
1395553323968495766
1395553333338570763
1395553343476203561
1395553353127432322
1395553362107170967
1395553375906566164
1395553385242955836
1395553393183031407
1395553405098921994
1395553415861633137
1395553425474846760
1395553435268419795
1395553448199716884
1395553460103151738
1395553469682679888
1395553478742642748
1395553488540536995
1395553497361154121
1395553506835959898
1395553519368409199
1395553531079037040
1395553542260916367
1395553553187340349
1395553562947358760
1395553575563956407
1395553584443031552
1395553592735436800
1395553602805698632
1395553612217712650
1395553622204616704
1395553632367415338
1395553643394105464
1395553654043574425
1395553663291752550
1395553677787398245
1395553688419827842
1395553700130459809
1395553714978422794
1395553727598821386
1395553739267641447
1395553750478880870
1395553760549273711
1395553769382608979
1395553786449367101
1395553798851923968
1395553809249472572
1395553821580726342
1395553830833229875
1395553840845033472
1395553856250708230
1395553866287943700
1395553877373222922
1395553893076963419
1395553902350434415
1395553912584405062
1395553921896026142
1395553932897423480
1395553942456242287
1395553951486578799
1395553961817411675
1395553971082625044
1395553981631172639
1395553990657314947
1395553998617968790
1395554008503947395
1395554017882411058
1395554028020039680
1395554038422044723
1395554049461325996
1395554060224168096
1395554070827372574
1395554082034417754
1395554093283672114
1395554105010814996
1395554113990955009
1395554123583066234
1395554133712441514
1395554143501815890
1395554153559883826
1395554163575881838
1395554172039991306
1395554187592601651
1395554196748501002
1395554204558426194
1395554215140786297
1395554225748054109
1395554236280082472
1395554245306224681
1395554253652754486
1395554262758461500
1395554271348396052
1395554279892455434
1395554290621218857
1395554299672793128
1395554309898244269
1395554319687749783
1395554330194477066
1395554339447246928
1395554348372594719
1395554358548234412
1395554367846875287
1395554377028210718
1395554387505451069
1395554397383295236
1395554408263192717
1395554421168930857
1395554435475968030
1395554446150340732
1395554457600921720
1395554467839213699
1395554478106607706
1395554488294576128
1395554498591854732
1395554508469178478
1395554517960888330
1395554528878923876
1395554538416635924
1395554549942718655
1395554561535508511
1395554570792603698
1395554580959461476
1395554590597841092
1395554600639135925
1395554609501835396
1395554619366707301
1395554628913070110
1395554638916485201
1395554648214999202
1395554657929269248
1395554668159045703
1395554678111993967
1395554686798528626
1395554697116520538
1395554706516082761
1395554720117952542
1395554732356927569
1395554744046588035
1395554755421671446
1395554767756988466
1395554777760268369
1395554786719301756
1395554796299354122
1395554806424404148
1395554816368971876
1395554826028318720
1395554835176231055
1395554845448077414
1395554856512651367
1395554871045787839
1395554896727638058
1395554908383612991
1395554926192623687
1395554937013932122
1395554948246143169
1395554958174060634
1395554967133098164
1395554976968741056
1395554985038843984
1395554994752716960
1395555005725020160
1395555015841681438
1395555031859728547
1395555044706877581
1395555054592852088
1395555065049387080
1395555074310144130
1395555083659382824
1395555094182760549
1395555104039370935
1395555113409445919
1395555124939849789
1395555133143650424
1395555142958448661
1395555154320818269
1395555165133602966
1395555175904841959
1395555187220938823
1395555197069168670
1395555206887899187
1395555216547385416
1395555226588811294
1395555237145874523
1395555245467238470
1395555256464572483
1395555266749010060
1395555275821289482
1395555285766242465
1395555295282860222
1395555304434962572
1395555314312548525
1395555324655833108
1395555334780882994
1395555343777665096
1395555356272361573
1395555366883823726
1395555376321007698
1395555386295062588
1395555395589771415
1395555404859048120
1395555414787231765
1395555423884677140
1395555435179806862
1395555447619981435
1395555460320595988
1395555468558209076
1395555478951694446
1395555487612665876
1395555495942553761
1395555504473772133
1395555513621807255
1395555524291858442
1395555535146979438
1395555546316406874
1395555556814753882
1395555567187005440
1395555576301228095
1395555585247805461
1395555595008086087
1395555605900431380
1395555614234513508
1395555625886289920
1395555636137427034
1395555647193354361
1395555656987185276
1395555666441011342
1395555676901871761
1395555688310112406
1395555698904928328
1395555709336289382
1395555722342694962
1395555732178337903
1395555744329240716
1395555757101027399
1395555770526990366
1395555783558824107
1395555793880743996
1395555803326451792
1395555813820465263
1395555823513632768
1395555834246725653
1395555844569039011
1395555854916255786
1395555865255215224
1395555876311531570
1395555892723712132
1395555902236524604
1395555913108164648
1395555924047040562
1395555934633201705
1395555945123151963
1395555959081930864
1395555971677421698
1395555983979450478
1395555995429634069
1395556020352319641
1395556032540840026
1395556047623557240
1395556058705170452
1395556067651616858
1395556077919273020
1395556088648040518
1395556098429419613
1395556111339225148
1395556123964211293
1395556137256091778
1395556154926567576
1395556165454397460
1395556181040431184
1395556191584784394
1395556202926182472
1395556215240527952
1395556227219587173
1395556237046710373
1395556246995603566
1395556257376501960
1395556270936686612
1395556280948756480
1395556291165818953
1395556301282742403
1395556310115815536
1395556321197297786
1395556331670212659
1395556346102812795
1395556355674472448
1395556365552062464
1395556375848943626
1395556386250686638
1395556396627660942
1395556407088124097
1395556416915374221
1395556426478391326
1395556435693404241
1395556446631887000
1395556455804964946
1395556466919866378
1395556479020306432
1395556491553013830
1395556501761949838
1395556512016896010
1395556522724954194
1395556532397146235
1395556543579029654
1395556553960063137
1395556563246383235
1395556573493071892
1395556584557383711
1395556594871177347
1395556609844969513
1395556619387015218
1395556627083558932
1395556636877393960
1395556649057648650
1395556658750685306
1395556670280695808
1395556680921780404
1395556690769870968
1395556700379156581
1395556708465770658
1395556719131885641
1395556729298747464
1395556744494583828
1395556755794296832
1395556764094566481
1395556772428779661
1395556781710643220
1395556795505971230
1395556806486397051
1395556817332863037
1395556831304351756
1395556839843696785
1395556849218097204
1395556859099873360
1395556868708896768
1395556883506528346
1395556893874851931
1395556904738230302
1395556915291095151
1395556923897548920
1395556934106742814
1395556945942810806
1395556964750332005
1395556974686371884
1395556984538792098
1395556995028881528
1395557004713394397
1395557014851031130
1395557023504138363
1395557034870439957
1395557044811202622
1395557054953029653
1395557065149382667
1395557077123858595
1395557086548721735
1395557094358388857
1395557103816671232
1395557113455054959
1395557123273916566
1395557133478658210
1395557142261530786
1395557153007472680
1395557163644092566
1395557175421567067
1395557187937636523
1395557198368870462
1395557210251333762
1395557220644818944
1395557230325141524
1395557240097738884
1395557255994413056
1395557267557974016
1395557278316363786
1395557289204646049
1395557301317800107
1395557314685046985
1395557325812666481
1395557347614785546
1395557360340172851
1395557371673186374
1395557379864527100
1395557388526026874
1395557398768259233
1395557416044593303
1395557427847630868
1395557436743487518
1395557447791546488
1395557457283125359
1395557465923260566
1395557475666628640
1395557486076887100
1395557497275809802
1395557508743172176
1395557519207829636
1395557529475485897
1395557539243888790
1395557551244050572
1395557561473826887
1395557575302578217
1395557584924053634
1395557596089552966
1395557609691676822
1395557622505148536
1395557636786622665
1395557647083765932
1395557663743672451
1395557675017830522
1395557683645648936
1395557694168895488
1395557705241858078
1395557717686354021
1395557728948191243
1395557738838229012
1395557748053381212
1395557759176413184
1395557767632392243
1395557776964714516
1395557787433439312
1395557797575393321
1395557809235693659
1395557819855671296
1395557828890071202
1395557838797144114
1395557848305504336
1395557857960656946
1395557866907111535
1395557877061517443
1395557887950192763
1395557898796535899
1395557907483066498
1395557916156629074
1395557926797574195
1395557936264249544
1395557944799531149
1395557954396094495
1395557964881858632
1395557977624412211
1395557986704822343
1395557995047288933
1395558004983730286
1395558013313482844
1395558023094599770
1395558033026977943
1395558042447384616
1395558051624255498
1395558061170757762
1395558072054841414
1395558083454828676
1395558095886749718
1395558114429763635
1395558126354301049
1395558135623716874
1395558145098645514
1395558154120724530
1395558164006703164
1395558173393293372
1395558184927625319
1395558195283628233
1395558207040131152
1395558217156919346
1395558227545952367
1395558238384033842
1395558251109548124
1395558264732778516
1395558276489543782
1395558287109259366
1395558297964384447
1395558309003526245
1395558318747025560
1395558327018066081
1395558337436717156
1395558347515887687
1395558359129657384
1395558372228595762
1395558384237023262
1395558396303773696
1395558405870981261
1395558415907946536
1395558424938414150
1395558435348676618
1395558444509040650
1395558453874790520
1395558464335646780
1395558473474899988
1395558483159552171
1395558491074199622
1395558501006315620
1395558511152332890
1395558520220553277
1395558530328825927
1395558540961120427
1395558552848040038
1395558563031814203
1395558572653543657
1395558581645873172
1395558595176829018
1395558605343817838
1395558615699554334
1395558624314654812
1395558634888364113
1395558645034520588
1395558655356829808
1395558664776974459
1395558675040698408
1395558684574351451
1395558696066744490
1395558706653171793
1395558715440234526
1395558724587880539
1395558734683574372
1395558744645042176
1395558755290185821
1395558767277379754
1395558781315977337
1395558790916734976
1395558799280046172
1395558807970779226
1395558816833212476
1395558827612700742
1395558837892812820
1395558848542019694
1395558857563963565
1395558866879778876
1395558877071933622
1395558887796772915
1395558898399842314
1395558909447503894
1395558920617197701
1395558935209050302
1395558944382128128
1395558954901442720
1395558968646176838
1395558977567461498
1395558988484972645
1395558999167864875
1395559009276137593
1395559018105147402
1395559028091916350
1395559039240245308
1395559048728023180
1395559059339346021
1395559068214628524
1395559081032417310
1395559090377457794
1395559100301053962
1395559109570334851
1395559119674540234
1395559129921224764
1395559139714928670
1395559151022903427
1395559160996691989
1395559168718405744
1395559178327818303
1395559187827658812
1395559198296899675
1395559207859785799
1395559216176955472
1395559227270889532
1395559236242772059
1395559246317490187
1395559256119447694
1395559266437566464
1395559288121856180
1395559299308060782
1395559309232050206
1395559315498074263";


            ulong[] array = ardata.Split('\n').Select(l => ulong.Parse(l.Trim())).ToArray();


            DiscordFilesSpliter.GorillaTimestampCompressor gc = new DiscordFilesSpliter.GorillaTimestampCompressor();

            var old = gc.Compress(array);


            IDsCompressor idc = new IDsCompressor();

            var newc = idc.Compress(array);

            Console.WriteLine("old = " + old.Length);
            Console.WriteLine("new = " + newc.Length);

                return;*/



            string executablePath = Process.GetCurrentProcess().MainModule.FileName;
            //string shortcutPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.StartMenu), Path.GetFileNameWithoutExtension(executablePath) + ".lnk");

            using (var protocolKey = Registry.ClassesRoot.OpenSubKey(URLProtocol, false))
            {
                bool admin = new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);

                if (admin)
                {
                    string title = "Upload to DSFILES";

                    using (var shellKey = Registry.ClassesRoot.CreateSubKey(@"*\shell\" + URLProtocol))
                    {
                        shellKey.SetValue("", title);
                        shellKey.SetValue("Icon", executablePath);

                        using (var commandKey = shellKey.CreateSubKey("command"))
                        {
                            commandKey.SetValue(string.Empty, "\"" + executablePath + "\" \"%1\"");
                        }
                    }

                    using (var shellKey = Registry.ClassesRoot.CreateSubKey(@"Directory\shell\" + URLProtocol))
                    {
                        shellKey.SetValue("", title);
                        shellKey.SetValue("Icon", executablePath);

                        using (var commandKey = shellKey.CreateSubKey("command"))
                        {
                            commandKey.SetValue(string.Empty, "\"" + executablePath + "\" \"%1\"");
                        }
                    }

                    using (var protocol = Registry.ClassesRoot.CreateSubKey(URLProtocol))
                    {
                        protocol.SetValue(string.Empty, $"URL: {URLProtocol} Protocol");
                        protocol.SetValue("URL Protocol", string.Empty);

                        using (var protocolOpenKey = protocol.CreateSubKey("shell").CreateSubKey("open"))
                        {
                            using (var commandKey = protocolOpenKey.CreateSubKey("command"))
                            {
                                commandKey.SetValue(string.Empty, "\"" + executablePath + "\" \"%1\"");
                            }
                        }
                    }
                }

                var value = ((string)Registry.ClassesRoot.OpenSubKey(URLProtocol + "\\shell\\open\\command", false).GetValue(string.Empty, null));

                if ((protocolKey == null || (value == null || !value.Contains(executablePath))) && !admin)
                {
                    var exception = (Exception)(new SecurityException("Can't modify url protocol please run as administrator"));
                    WriteException(ref exception);

#if !DEBUG
                    return;
#endif
                }
            }

            /*WshShell shell = new WshShell();
            IWshShortcut shortcut = (IWshShortcut)shell.CreateShortcut(shortcutPath);

            shortcut.TargetPath = executablePath;
            shortcut.WorkingDirectory = Path.GetDirectoryName(executablePath);
            shortcut.Description = "Description of your shortcut";
            shortcut.IconLocation = executablePath; // Set the icon to the executable
            shortcut.Save();*/

            //Console.WriteLine('[' + string.Join(", ", args.Select(c => '\"' + c + '\"')) + ']');
            //args = ["upload", "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2OGJkNTA5YzdmZjliOTcxYmUzMzkwNyIsImRhdGEiOiJBQUFBQVEiLCJpYXQiOjE3MjA3MjMzNzh9.eBcyUX7r1oQgX_gPbu6BDmffVVttxam9zSJ_pYQDvP4"];

            if (args.Length > 0 && args[0] == "ask_upload")
            {
                OpenFileDialog ofd = new OpenFileDialog()
                {
                    ValidateNames = false,
                    CheckFileExists = false,
                    CheckPathExists = true,
                    Multiselect = true,
                    DereferenceLinks = true,
                    FileName = "Upload Selection."
                };

                if (ofd.ShowDialog() != DialogResult.OK)
                    return;

                args = ofd.FileNames;
            }

            if (!DirSetted)
                throw new IOException("What?");

            if (!Debugger.IsAttached)
            {
                AppDomain.CurrentDomain.UnhandledException += (object sender, UnhandledExceptionEventArgs e) =>
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine(e.ExceptionObject.ToString());
                    Console.ReadKey();
                };
            }

#if DEBUG
            /*if(args.Length ==0)
            {
                var df = Assembly.GetCallingAssembly().Location.Replace(".dll",".exe");

                Process du = Process.Start(new ProcessStartInfo()
                {
                    FileName = df,
                    Arguments = "",

                    RedirectStandardInput = true,
                });

                {
                    fs.CopyTo(du.StandardInput.BaseStream);
                }

                du.StandardInput.BaseStream.Close();

                du.WaitForExit();
                Environment.Exit(0);
            }*/

            if (args.Length > 0 && args[0].StartsWith('/'))
            {
                if (args[0] == "/updateKey")
                {
                    using (FileStream fs = File.Open(".\\key", FileMode.OpenOrCreate, FileAccess.ReadWrite))
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            byte[] data = client.GetByteArrayAsync("https://www.random.org/cgi-bin/randbyte?nbytes=16384&format=f").Result;

                            Console.WriteLine("Downloaded " + data.Length + " (" + i + ')');

                            if (data.Length < 128)
                            {
                                data = RandomNumberGenerator.GetBytes(16384).Where(d => d != 0).ToArray();

                                Console.WriteLine("Generated localy: " + data.Length);
                            }

                            fs.Write(data, 0, data.Length);
                        }
                    }
                }

                /*if (args[0] == "/train")
                {
                    List<byte[]> data = [];

                    foreach (var file in Directory.EnumerateFiles(args.Length > 1 ? args[1] : "seeds\\", "*", SearchOption.AllDirectories))
                    {
                        data.Add(File.ReadAllBytes(file));
                    }

                    var dict = DictBuilder.TrainFromBufferFastCover(data, 22, 512 * 1024 * 1024);

                    File.WriteAllBytes("trained.dict", dict.ToArray());
                }*/

                return;
            }
#endif

            args = args.Select(arg => arg.StartsWith("jsp:/", StringComparison.InvariantCultureIgnoreCase) ? GetFromJspaste(arg) : arg).ToArray();

            //Console.WriteLine(string.Join(" ", args));

            WebHookHelper? webHookHelper = null;

            try
            {
                webHookHelper = new WebHookHelper(client, File.ReadAllText(WebHookFileName));
            }
            catch { }

            //Console.ForegroundColor = ConsoleColor.White;

            //args = ["-pipe", "aupo-sEAAiYMTpNZn67h9JFLuH-TgeEM$W6SJUVAbZ5q5NsciKvczrCB8RelG_OXbBr5uscCXuOo", "test.html"];

            if (args.Length > 1)
            {
                string[] splited;

                switch (args[0].ToLower())
                {
                    case "-delete":
                        string data = args[1].Split('/').Last();

                        splited = data.Split(':');

                        webHookHelper = new WebHookHelper(client, BitConverter.ToUInt64(splited[1].FromBase64Url()), splited[2]);

                        ulong[] ids = new DiscordFilesSpliter.GorillaTimestampCompressor().Decompress(splited[0].FromBase64Url());

                        Console.WriteLine("Removing file chunks (" + ids.Length + ")");

                        webHookHelper.RemoveMessages(ids).GetAwaiter().GetResult();

                        if (args.Length > 2)
                        {
                            DSServerHelper.RemoveFile(args[2]).GetAwaiter().GetResult();
                        }

                        Thread.Sleep(2000);
                        return;

                    case "-downnload":
                        using (FileStream fs = File.Open(args[2], FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite))
                        {
                            splited = args[1].Split('/')[0].Split(':').Last().Split('$');

                            DiscordFilesSpliter.Decode(splited[0].FromBase64Url(), (splited.Length > 1 ? splited[1].FromBase64Url() : null), fs).GetAwaiter().GetResult();
                        }
                        return;

                    case "-upload":

                        using (FileStream fs = File.Open(args[1], FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite))
                        {
                            var encoded = DiscordFilesSpliter.Encode(webHookHelper, Path.GetFileName(args[1]), fs).GetAwaiter().GetResult();

                            UploadedFilesWriter.WriteLine(encoded.UploadLog);

                            Console.Write("FileSeed: " + encoded.Seed);
                        }
                        return;

                    case "-pipe": // Ussage -pipe {filename}
                        using (FileStream fs = File.Open(args[2], FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite))
                        {
                            splited = args[1].Split('/')[0].Split(':').Last().Split('$');

                            using (var s = DiscordFilesSpliter.DecodeCorePipe(splited[0].FromBase64Url(), (splited.Length > 1 ? splited[1].FromBase64Url() : null)))
                            {
                                Console.Write("Coping to : " + fs.Handle);

                                s.CopyTo(fs);
                            }
                        }
                        return;
                }
            }

            if (File.Exists(DiscordFilesSpliter.UnsendedIds))
            {
                try
                {
                    string unsendedIds = File.ReadAllText(DiscordFilesSpliter.UnsendedIds);

                    if (!string.IsNullOrWhiteSpace(unsendedIds))
                    {
                        Console.WriteLine("Removing unfinished file upload chunks");

                        webHookHelper.RemoveMessages(unsendedIds.Split('\n').Select(l => l.Trim()).Where(l => !string.IsNullOrWhiteSpace(l)).Select(l => ulong.TryParse(l, out ulong id) ? id : 0).ToArray()).GetAwaiter().GetResult();

                        File.WriteAllBytes(DiscordFilesSpliter.UnsendedIds, []);

                        Console.WriteLine();
                    }
                }
                catch (Exception ex)
                {
                    Program.WriteException(ref ex);
                }
            }

            /*byte[] val = Compress(new List<ulong>() { 1163590914585940018, 1163590939156152330, 1163590953945268364, 1163590977127194658, 1163591000413970554, 1163591016801124363, 1163591040540868698, 1163591061541756978, 1163591068487536691, 1163591114377404477, 1163591134988214294, 1163591157318688833, 1163591178676097146, 1163591201757347911, 1163591235089477672, 1163591301082652743, 1163591332040818698 });

            int b = 0;

            foreach (var a in Decompress(val))
            {
                b++;
                Console.WriteLine(a + " " + b);
            }

            SplitByte(255, out byte o, out byte h);*/

            /*Console.WriteLine(o);
            Console.WriteLine(h);*/

            //Console.WriteLine(Combine4Bits(16,13));


            // byte[] dataToUpload = File.ReadAllBytes("C:\\Users\\gatoncio\\Downloads\\Windows11_InsiderPreview_Client_x64_es-es_22631.iso");

            //Console.WriteLine(Convert.ToBase64String(dataToUpload).ToString());

            //DiscordFilesSpliter.Decode("AB8AxLihWC8OAmEBjAxyrQ4pIhhGUG8iGSpQACIVIFCCIhQJINUiBaUgeA", "claro2.msi").GetAwaiter().GetResult();

            AnsiHelper.InitConsle();

            if (args.Length == 0)
            {
                Application.Init();

                try
                {
                    //Console.OutputEncoding = Encoding.UTF8;
                    Application.Run(new Main());
                }
                finally
                {
                    Application.Shutdown();
                }
            }

            if (!File.Exists(WebHookFileName))
            {
                string webHookData = Clipboard.GetText();

                if (string.IsNullOrEmpty(webHookData))
                {
                    throw new Exception("Could not get clipboard data");
                }

                string cp = webHookData.Trim();

                if (cp.Contains("https://", StringComparison.InvariantCultureIgnoreCase) && cp.Contains("webhook", StringComparison.InvariantCultureIgnoreCase))
                {
                    var wh = new WebHookHelper(client, cp);

                    if (wh.channelId <= 0) throw new Exception("WebHook is not valid");

                    File.WriteAllText(WebHookFileName, cp);

                    webHookHelper = new WebHookHelper(client, cp);
                }
                else
                {
                    Console.WriteLine(AnsiColors.BrightRed + "Please " + AnsiColors.Red + "copy a valid webhook onto the clipboard " + AnsiColors.BrightRed + "first");
                    Console.ReadLine();
                    Environment.Exit(0);
                }
            }

            string filePath = args[0];

            if (args.Length == 1 && Directory.Exists(filePath)) 
                args = args.Concat([""]).ToArray();

            CompressionLevel compLevel = CompressionLevel.NoCompression;

            Stream? stream = null;

            if (args.Length == 1)
            {
                stream = File.OpenRead(filePath);

                compLevel = DiscordFilesSpliter.ShouldCompress(Path.GetExtension(filePath), stream.Length);
            }
            else
            {
                string rootPath = ZipCompressor.GetRootPath(args);

                Console.WriteLine(AnsiColors.Blue + "Compressing files please " + AnsiColors.BrightBlue+ "wait\n");

                string archivedPath = Path.GetTempFileName();

                ClientHelper.RemoveOnBoot(archivedPath);

                SevenZipPaths(archivedPath, CompressionLevel.Optimal, args);

                filePath = rootPath.Split('\\').Last(c => !string.IsNullOrEmpty(c)) + ".7z";

                int tries = 0;

                while (tries < 5)
                {
                    try
                    {
                        stream = File.OpenRead(archivedPath);
                        break;
                    }
                    catch (Exception ex)
                    {
                        tries++;

                        Program.WriteException(ref ex);
                    }
                }

                Console.WriteLine();
            }

            if (stream == null)
                throw new ArgumentNullException(nameof(stream));

            string fileName = Path.GetFileName(filePath);

            var result = DiscordFilesSpliter.EncodeCore(webHookHelper, fileName, stream, compLevel).Result;

            stream.Dispose();

            if (!string.IsNullOrEmpty(API_TOKEN))
            {
                DSServerHelper.AddFile(result.ToJson()).GetAwaiter().GetResult();
            }

            UploadedFilesWriter.WriteLine(result.UploadLog);

            ClipClipboard.SetText(result.WebLink);

            Console.WriteLine(AnsiColors.BrightCyan + "WebLink" +AnsiColors.DarkGray +": " + AnsiColors.Silver + result.WebLink + '\n');
            Console.Write(AnsiColors.BrightBlue + "FileSeed"+AnsiColors.DarkGray+": " + AnsiColors.Silver + result.Seed);
            Console.ReadLine();
            Environment.Exit(0);


            /* Console.WriteLine("Write the seed of the file you want to download");
             Console.WriteLine();
             Console.Write("Seed:");

             string? fileData = Console.ReadLine().Trim();

             if (fileData.StartsWith("jsp:/", StringComparison.InvariantCultureIgnoreCase)) fileData = GetFromJspaste(fileData); //JSPasteClient.Get(fileData.Split('/').Last()).Result;

             //Console.WriteLine(fileData);

             string[] fileDataSplited = fileData.Split('/')[0].Split(':');

             string[] seedSplited = fileDataSplited.Last().Split('$');

             byte[] seed = seedSplited[0].FromBase64Url();
             byte[]? key = seedSplited.Length > 1 ? seedSplited[1].FromBase64Url() : null;

             string destFileName = Encoding.UTF8.GetString(fileDataSplited[0].FromBase64Url().BrotliDecompress()) + (fileDataSplited.Length > 2 && !string.IsNullOrEmpty(fileDataSplited.Skip(1).First()) ? '.' + fileDataSplited.Skip(1).First() : null);

             SaveFileDialog sfd = new SaveFileDialog()
             {
                 FileName = destFileName,
                 ShowHiddenFiles = true,
             };

             if (sfd.ShowDialog() == DialogResult.OK)
             {
                 string filename = sfd.FileName;

                 Console.WriteLine();

                 using (FileStream fs = File.Open(filename, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite))
                 {
                     DiscordFilesSpliter.Decode(seed, key, fs).GetAwaiter().GetResult();
                 }
             }
             else
             {
                 Console.WriteLine("\nOperation cancelled");
                 Thread.Sleep(2000);
                 Environment.Exit(0);
             }

             //byte[] fileSeed = Convert.FromBase64String("AQMgxMbmo5kPC0BEaaeFEhAUUEQAq4USEB4whI2uhRIQCgDEV7GFEhA=");

             //WFIMEncoder.Decode(fileSeed, "resultado.zip").GetAwaiter().GetResult();

             //Console.WriteLine(Convert.ToBase64String(WFIMEncoder.Decode(fileSeed).Result).ToString());

             //Console.ReadLine();*/
        }

        public static void WriteException(ref Exception ex, params string[] messages)
        {
            QuickWriteException(ref ex, messages);

            Thread.Sleep(5000);
        }

        public static void QuickWriteException(ref Exception ex, params string[] messages)
        {
            var lastColor = Console.ForegroundColor;
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(string.Join('\n', messages.Where(m => !string.IsNullOrEmpty(m))) + '\n' + ex.ToString() + '\n');
            Console.ForegroundColor = lastColor;
        }
    }
}